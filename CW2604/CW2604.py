# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fLMZHh1ixbZMJJE51cpolUKxLf2_IydM
"""

## Step 1
! git clone https://github.com/YoongiKim/CIFAR-10-images

import os
import torch
import numpy as np
import torchvision.transforms as transforms
import pandas as pd

## Activate CUDA on Google Colab

# Edit > Notebook Settings > select GPU in Hardware accelerator

train_on_gpu = torch.cuda.is_available()

if not train_on_gpu:
    print('CUDA is not available.  Training on CPU ...')
else:
    print('CUDA is available!  Training on GPU ...')

## Step 3
# Define data transformations to facilitate data augmentation and normalization
# E.g., flip, rotation, translation, to_tensor, normalize

transform = transforms.Compose([
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])

#csv for test data

dir_path = []
clss = []
for folder in os.listdir("CIFAR-10-images/test/"):
  for files in os.listdir("CIFAR-10-images/test/"+folder):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        path = 'CIFAR-10-images/test/'+folder+'/'+files
        clss1 = folder
        dir_path.append(path)
        clss.append(clss1)


test_data = pd.DataFrame({'directory_path':dir_path,'class':clss})

test_data = test_data.to_csv("testdata",index=False)

## Step 4
# Write your custom data loader. Define train, validation and test dataloader

#csv for train data

dir_path = []
clss = []
for folder in os.listdir("CIFAR-10-images/train/"):
  for files in os.listdir("CIFAR-10-images/train/"+folder):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        path = 'CIFAR-10-images/train/'+folder+'/'+files
        clss1 = folder
        dir_path.append(path)
        clss.append(clss1)


train_data = pd.DataFrame({'directory_path':dir_path,'class':clss})

train_data = train_data.to_csv('traindata',index = False)

class MyDataset():
  def __init__(self,image_set,argument=True):
    with open(image_set,"r") as csv_handle:
      csv_reader = csv.reader(csv_handle,delimiter=",")
      self.imgfiles=[eachline[0] for eachline in csv_reader]
    self.argument=argument
  def __len__(self):
    return len(self.imgfiles)
  def __getitem__(self,idx):
    img=imageio.imread(self.imgfiles[idx])
    X=np.asarray(img,dtype=np.float32)
    if self.argument:
      X = do_your_transform(X)
    Y=self.classlabels[idx]
    return X,Y

class MyDataset():
  def __init__(self,image_set,argument=True):
    with open(image_set,"r") as csv_handle:
      csv_reader = csv.reader(csv_handle,delimiter=",")
      self.imgfiles=[eachline[0] for eachline in csv_reader]
    self.argument=argument
  def __len__(self):
    return len(self.imgfiles)
  def __gititem__(self,idx):
    img=imageio.imread(self.imgfiles[idx])
    X=np.asarray(img,dtype=np.float32)
    if self.argument:
      X=do_yarn_transform(X)
    Y=self.classlabels[idx]
    return X,Y

## Step 6
# model = CNN(n_hidden_layers, n_output)

import torch.nn as nn
import torch.nn.functional as F

# define the CNN architecture
class CNN(nn.Module):
    def __init__(self, n_hidden_layers, n_outputs):
        super(CNN, self).__init__()
        # convolutional layer (sees 32x32x3 image tensor)
        self.conv1 = nn.Conv2d(3, 16, 3, padding=1)
        # convolutional layer (sees 16x16x16 tensor)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        # convolutional layer (sees 8x8x32 tensor)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        # max pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        # linear layer 
        self.fc1 = nn.Linear(64 * 4 * 4, n_hidden_layers)
        # linear layer 
        self.fc2 = nn.Linear(n_hidden_layers, n_outputs)
        # dropout layer 
        self.dropout = nn.Dropout(0.25)

    def forward(self, x):
        # add sequence of convolutional and max pooling layers
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        # flatten image input
        x = x.view(-1, 64 * 4 * 4)
        # add dropout layer
        x = self.dropout(x)
        # add 1st hidden layer, with relu activation function
        x = F.relu(self.fc1(x))
        # add dropout layer
        x = self.dropout(x)
        # add 2nd hidden layer, with relu activation function
        x = self.fc2(x)
        return x

# create a complete CNN
model = CNN(500,10)
print(model)

# move tensors to GPU if CUDA is available
if train_on_gpu:
    model.cuda()

## Step 7
# Define loss and solver
# criterion = ...
# optimizer = ...

import torch.optim as optim

criterion = None   #loss

optimizer = None   #solver

## Step 8
# train_with_validation
# train(n_epoch, model_filename, criterion, optimizer)

## Step 9
# Evaluation with inference: load model
# performance = test(model_filename) # total accuracy

## Step 10
# Push the .py files to MLS2021 github with branchname CW2604
# There should be a main.py
# performance.txt

