# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fLMZHh1ixbZMJJE51cpolUKxLf2_IydM
"""

## Step 1
! git clone https://github.com/YoongiKim/CIFAR-10-images

import os
import torch
import numpy as np
import torchvision.transforms as transforms
import pandas as pd
from torch.utils.data.sampler import SubsetRandomSampler
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import cv2
import csv
import imageio
from PIL import Image
import matplotlib.pyplot as plt
import helper

## Activate CUDA on Google Colab

# Edit > Notebook Settings > select GPU in Hardware accelerator

train_on_gpu = torch.cuda.is_available()

if not train_on_gpu:
    print('CUDA is not available.  Training on CPU ...')
else:
    print('CUDA is available!  Training on GPU ...')

## Step 3
# Define data transformations to facilitate data augmentation and normalization
# E.g., flip, rotation, translation, to_tensor, normalize

def transform(X):
  transform = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.5, 0.5, 0.5], 
                                                            [0.5, 0.5, 0.5])])

  Y = transform(X)
  return Y

#csv for train data

dir_path = []
clss = []
for folder in os.listdir("CIFAR-10-images/train/"):
  for files in os.listdir("CIFAR-10-images/train/"+folder):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        path = 'CIFAR-10-images/train/'+folder+'/'+files
        clss1 = folder
        dir_path.append(path)
        clss.append(clss1)


train_data = pd.DataFrame({'directory_path':dir_path,'class':clss})

train_data = train_data.to_csv("train_data.csv",index=False)

#csv for test data

dir_path = []
clss = []
for folder in os.listdir("CIFAR-10-images/test/"):
  for files in os.listdir("CIFAR-10-images/test/"+folder):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        path = 'CIFAR-10-images/test/'+folder+'/'+files
        clss1 = folder
        dir_path.append(path)
        clss.append(clss1)


test_data = pd.DataFrame({'directory_path':dir_path,'class':clss})

test_data = test_data.to_csv("test_data.csv",index=False)

## Step 4
# Write your custom data loader. Define train, validation and test dataloader

#csv for train data

class MyDataset1():
  
  def __init__(self,image_set,argument=True):
    df = pd.read_csv(image_set)
    self.imgfiles=list(dfdummy.iloc[:,0])
    self.classlabels=list(dfdummy.iloc[:,1])
    self.argument=argument

  def __len__(self):
    return len(self.imgfiles)

  def __getitem__(self,idx):
    img=cv2.imread(self.imgfiles[idx])
    X=np.asarray(img,dtype=np.uint8)
    if self.argument:
      pilx = Image.fromarray(img)
      X=do_your_transform(pilx)
    Y=self.classlabels[idx]
    return X,Y

valid_size = 0.2

train_data = MyDataset("train_data.csv")
train_data1 = MyDataset("train_data.csv",argument=False)
test_data = MyDataset("test_data.csv",argument=False)

indices = list(range(len(train_data)))
np.random.shuffle(indices)
split = int(np.floor((valid_size * len(train_data))))
valid_idx , train_idx = indices[:split] , indices[split:]

train_sampler = SubsetRandomSampler(train_idx)
valid_sampler = SubsetRandomSampler(valid_idx)

train_loader = torch.utils.data.DataLoader(train_data, batch_size = 64, sampler = train_sampler)
valid_loader = torch.utils.data.DataLoader(train_data , batch_size = 64, sampler = valid_sampler)
trainloader1 = torch.utils.data.DataLoader(train_data1, batch_size = 64)
test_loader = torch.utils.data.DataLoader(test_data, batch_size = 64, shuffle = True)

## Step 6
# model = CNN(n_hidden_layers, n_output)

import torch.nn as nn
import torch.nn.functional as F

# define the CNN architecture
class CNN(nn.Module):
    def __init__(self, n_hidden_layers, n_outputs):
        super(CNN, self).__init__()
        # convolutional layer (sees 32x32x3 image tensor)
        self.conv1 = nn.Conv2d(3, 16, 3, padding=1)
        # convolutional layer (sees 16x16x16 tensor)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        # convolutional layer (sees 8x8x32 tensor)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        # max pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        # linear layer 
        self.fc1 = nn.Linear(64 * 4 * 4, n_hidden_layers)
        # linear layer 
        self.fc2 = nn.Linear(n_hidden_layers, n_outputs)
        # dropout layer 
        self.dropout = nn.Dropout(0.25)

    def forward(self, x):
        # add sequence of convolutional and max pooling layers
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        # flatten image input
        x = x.view(-1, 64 * 4 * 4)
        # add dropout layer
        x = self.dropout(x)
        # add 1st hidden layer, with relu activation function
        x = F.relu(self.fc1(x))
        # add dropout layer
        x = self.dropout(x)
        # add 2nd hidden layer, with relu activation function
        x = self.fc2(x)
        return x

# create a complete CNN
model = CNN(500,10)
print(model)

# move tensors to GPU if CUDA is available
if train_on_gpu:
    model.cuda()

## Step 7
# Define loss and solver
# criterion = ...
# optimizer = ...

import torch.optim as optim

criterion = nn.CrossEntropyLoss()   #loss

optimizer = optim.SGD(model_cnn.parameters(), lr=0.01)   #solver

## Step 8
# train_with_validation
# train(n_epoch, model_filename, criterion, optimizer)

def Model_train(n_epochs, model, criterion, optimizer, train_loader = train_loader, valid_loader = valid_loader):
  valid_loss_min = np.Inf # track change in validation loss

  for epoch in range(1, n_epochs+1):

    # keep track of training and validation loss
    train_loss = 0.0
    valid_loss = 0.0
    
    ###################
    # train the model #
    ###################
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        # move tensors to GPU if CUDA is available
        if train_on_gpu:
          data, target = data.cuda(), target.cuda()
        # clear the gradients of all optimized variables
        optimizer.zero_grad()
        # forward pass: compute predicted outputs by passing inputs to the model                
        optimizer.zero_grad()
        output = model(data)
        # calculate the batch loss
        loss = criterion(output, target)
        # backward pass: compute gradient of the loss with respect to model parameters
        loss.backward()
        # perform a single optimization step (parameter update)
        optimizer.step()
        # update training loss
        train_loss += loss.item()*data.size(0)
        
    ######################    
    # validate the model #
    ######################
    model.eval()
    for batch_idx, (data, target) in enumerate(valid_loader):
      # move tensors to GPU if CUDA is available
      if train_on_gpu:
        data, target = data.cuda(), target.cuda()
      # forward pass: compute predicted outputs by passing inputs to the model
      output = model(data)
      # calculate the batch loss
      loss = criterion(output, target)
      # update average validation loss 
      valid_loss += loss.item()*data.size(0)
    
    # calculate average losses
    train_loss = train_loss/len(train_loader.sampler)
    valid_loss = valid_loss/len(valid_loader.sampler)
        
    # print training/validation statistics 
    print('Epoch: {} \tTraining Loss: {:.6f} \tValidation Loss: {:.6f}'.format(
        epoch, train_loss, valid_loss))
    
    # save model if validation loss has decreased
    if valid_loss <= valid_loss_min:
      print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(
      valid_loss_min,
      valid_loss))
      torch.save(model.state_dict(), 'model_augmented.pt')
      valid_loss_min = valid_loss

## Step 9
# Evaluation with inference: load model
# performance = test(model_filename) # total accuracy
test_loss = 0.0
class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))

model.eval()
# iterate over test data
for batch_idx, (data, target) in enumerate(test_loader):
    # move tensors to GPU if CUDA is available
    if train_on_gpu:
        data, target = data.cuda(), target.cuda()
    # forward pass: compute predicted outputs by passing inputs to the model
    output = model(data)
    # calculate the batch loss
    loss = criterion(output, target)
    # update test loss 
    test_loss += loss.item()*data.size(0)
    # convert output probabilities to predicted class
    _, pred = torch.max(output, 1)    
    # compare predictions to true label
    correct_tensor = pred.eq(target.data.view_as(pred))
    correct = np.squeeze(correct_tensor.numpy()) if not train_on_gpu else np.squeeze(correct_tensor.cpu().numpy())
    # calculate test accuracy for each object class
    for i in range(batch_size):
        label = target.data[i]
        class_correct[label] += correct[i].item()
        class_total[label] += 1

# average test loss
test_loss = test_loss/len(test_loader.dataset)
print('Test Loss: {:.6f}\n'.format(test_loss))

for i in range(10):
    if class_total[i] > 0:
        print('Test Accuracy of %5s: %2d%% (%2d/%2d)' % (
            classes[i], 100 * class_correct[i] / class_total[i],
            np.sum(class_correct[i]), np.sum(class_total[i])))
    else:
        print('Test Accuracy of %5s: N/A (no training examples)' % (classes[i]))

print('\nTest Accuracy (Overall): %2d%% (%2d/%2d)' % (
    100. * np.sum(class_correct) / np.sum(class_total),
    np.sum(class_correct), np.sum(class_total)))

## Step 10
# Push the .py files to MLS2021 github with branchname CW2604
# There should be a main.py
# performance.txt

